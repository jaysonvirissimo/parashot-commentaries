#!/usr/bin/env ruby

require 'streamio-ffmpeg'
require 'fileutils'

# Pre-encoded intro and outro files
INTRO_FILE = File.join(__dir__, '../audio/intro.mp3')
OUTRO_FILE = File.join(__dir__, '../audio/outro.mp3')
AUDIO_DIR = File.join(__dir__, '../audio')

def reencode_audio(input, output)
  command = [
    'ffmpeg',
    '-i', input,
    '-ar', '44100',
    '-ac', '2',
    '-b:a', '192k',
    '-c:a', 'libmp3lame',
    output
  ].join(' ')

  puts "Re-encoding #{input} -> #{output}"
  system(command) || puts("Error re-encoding #{input}")
end

def pad_audio(input_file, output_file)
  # Ensure all necessary files exist
  [INTRO_FILE, OUTRO_FILE, input_file].each do |file|
    unless File.exist?(file)
      puts "Error: Required file not found at #{file}"
      exit 1
    end
  end

  # Temporary path for re-encoded main file
  main_fixed = File.join(AUDIO_DIR, 'main_fixed.mp3')

  # Only re-encode the main file dynamically
  reencode_audio(input_file, main_fixed)

  # Build the command for concatenation
  command = [
    'ffmpeg',
    '-i', INTRO_FILE,
    '-i', main_fixed,
    '-i', OUTRO_FILE,
    '-filter_complex',
    '"[0:a][1:a][2:a]concat=n=3:v=0:a=1[aout];[aout]loudnorm=I=-16:LRA=11:TP=-1.5[normalized]"',
    '-map', '[normalized]',
    '-acodec', 'libmp3lame',
    '-b:a', '192k',
    output_file
  ].join(' ')

  puts "Running command: #{command}"
  success = system(command)

  unless success
    puts "Error running ffmpeg: #{$?.exitstatus}"
    exit 1
  end

  # Cleanup
  File.delete(main_fixed) if File.exist?(main_fixed)

  puts "Output saved to #{output_file}"
end

# Parse arguments
if ARGV.length != 1
  puts "Usage: bin/pad_audio <input_file>"
  exit 1
end

input_file = ARGV[0]
output_file = File.join(AUDIO_DIR, File.basename(input_file, File.extname(input_file)) + '_padded.mp3')

pad_audio(input_file, output_file)
